#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

$stdout.sync = true
$stderr.sync = true

options = OpenStruct.new(
    'pid' => nil,
    'sdk_path' => nil,
    'uid' => nil,
    'gems_to_include' => []
)

module DebugPrinter

  class << self
    attr_accessor :cli_debug

    def print_debug(msg)
      if DebugPrinter.cli_debug
        $stderr.puts msg
      end
    end
  end

end

DebugPrinter.cli_debug = ARGV.include? '--debug'

opts = OptionParser.new do |opts|
  # TODO need some banner
  opts.banner = <<EOB
Some useful banner.
EOB

  opts.on('--pid PID', 'pid of process you want to attach to for debugging') do |pid|
    options.pid = pid
  end

  opts.on('--ruby-path RUBY_PATH', 'path to ruby interpreter') do |ruby_path|
    options.ruby_path = ruby_path
  end

  opts.on('--uid UID', 'uid which this process should set after executing gdb attach') do |uid|
    options.uid = uid
  end

  opts.on('--include-gem GEM_LIB_PATH', 'lib of gem to include') do |gem_lib_path|
    options.gems_to_include << gem_lib_path
  end
end

opts.parse! ARGV

unless options.pid
  $stderr.puts 'You should specify PID of process you want to attach to'
  exit 1
end

unless options.ruby_path
  $stderr.puts 'You should specify path to the ruby interpreter'
  exit 1
end

argv = '["' + ARGV * '", "' + '"]'
debugger_loader_path = File.expand_path(File.dirname(__FILE__)) + '/../lib/ruby-debug-ide/attach/debugger_loader'

options.gems_to_include.each do |gem_path|
  $LOAD_PATH.unshift(gem_path) unless $LOAD_PATH.include?(gem_path)
end

require 'ruby-debug-ide/greeter'
Debugger::print_greeting_msg($stdout, nil, nil)

require 'ruby-debug-ide/attach/util'
require 'ruby-debug-ide/attach/native_debugger'
require 'ruby-debug-ide/attach/process_thread'

debugger = choose_debugger(options.ruby_path, options.pid, options.gems_to_include, debugger_loader_path, argv)

trap('INT') do
  unless debugger.exited?
    $stderr.puts "backtraces for threads:\n\n"
    process_threads = debugger.process_threads
    if process_threads
      process_threads.each do |thread|
        $stderr.puts "#{thread.thread_info}\n#{thread.last_bt}\n\n"
      end
    end
    debugger.exit
  end
  exit!
end

debugger.attach_to_process
debugger.set_flags

if options.uid
  DebugPrinter.print_debug("changing current uid from #{Process.uid} to #{options.uid}")
  Process::Sys.setuid(options.uid.to_i)
end

if debugger.check_already_under_debug
  $stderr.puts "Process #{debugger.pid} is already under debug"
  debugger.exit
  exit!
end

should_check_threads_state = true

while should_check_threads_state
  should_check_threads_state = false
  debugger.update_threads.each do |thread|
    thread.switch
    while thread.need_finish_frame
      should_check_threads_state = true
      thread.finish
    end
  end
end

debugger.wait_line_event
debugger.load_debugger
debugger.exit

sleep
